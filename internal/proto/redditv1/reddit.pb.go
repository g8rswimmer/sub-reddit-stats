// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: protos/reddit/reddit.proto

package redditv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSubredditMostUpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subreddit string `protobuf:"bytes,1,opt,name=subreddit,proto3" json:"subreddit,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetSubredditMostUpsRequest) Reset() {
	*x = GetSubredditMostUpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_reddit_reddit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubredditMostUpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubredditMostUpsRequest) ProtoMessage() {}

func (x *GetSubredditMostUpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_reddit_reddit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubredditMostUpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubredditMostUpsRequest) Descriptor() ([]byte, []int) {
	return file_protos_reddit_reddit_proto_rawDescGZIP(), []int{0}
}

func (x *GetSubredditMostUpsRequest) GetSubreddit() string {
	if x != nil {
		return x.Subreddit
	}
	return ""
}

func (x *GetSubredditMostUpsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSubredditMostUpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubredditPosts []*SubredditData `protobuf:"bytes,1,rep,name=subreddit_posts,json=subredditPosts,proto3" json:"subreddit_posts,omitempty"`
}

func (x *GetSubredditMostUpsResponse) Reset() {
	*x = GetSubredditMostUpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_reddit_reddit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubredditMostUpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubredditMostUpsResponse) ProtoMessage() {}

func (x *GetSubredditMostUpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_reddit_reddit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubredditMostUpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubredditMostUpsResponse) Descriptor() ([]byte, []int) {
	return file_protos_reddit_reddit_proto_rawDescGZIP(), []int{1}
}

func (x *GetSubredditMostUpsResponse) GetSubredditPosts() []*SubredditData {
	if x != nil {
		return x.SubredditPosts
	}
	return nil
}

type SubredditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title               string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Downs               int32   `protobuf:"varint,2,opt,name=downs,proto3" json:"downs,omitempty"`
	UpvoteRatio         float32 `protobuf:"fixed32,3,opt,name=upvote_ratio,json=upvoteRatio,proto3" json:"upvote_ratio,omitempty"`
	Ups                 int32   `protobuf:"varint,4,opt,name=ups,proto3" json:"ups,omitempty"`
	TotalAwardsReceived int32   `protobuf:"varint,5,opt,name=total_awardsReceived,json=totalAwardsReceived,proto3" json:"total_awardsReceived,omitempty"`
	Name                string  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Subreddit           string  `protobuf:"bytes,7,opt,name=subreddit,proto3" json:"subreddit,omitempty"`
	Id                  string  `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Author              string  `protobuf:"bytes,9,opt,name=author,proto3" json:"author,omitempty"`
	AuthorFullname      string  `protobuf:"bytes,10,opt,name=author_fullname,json=authorFullname,proto3" json:"author_fullname,omitempty"`
}

func (x *SubredditData) Reset() {
	*x = SubredditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_reddit_reddit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubredditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubredditData) ProtoMessage() {}

func (x *SubredditData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_reddit_reddit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubredditData.ProtoReflect.Descriptor instead.
func (*SubredditData) Descriptor() ([]byte, []int) {
	return file_protos_reddit_reddit_proto_rawDescGZIP(), []int{2}
}

func (x *SubredditData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SubredditData) GetDowns() int32 {
	if x != nil {
		return x.Downs
	}
	return 0
}

func (x *SubredditData) GetUpvoteRatio() float32 {
	if x != nil {
		return x.UpvoteRatio
	}
	return 0
}

func (x *SubredditData) GetUps() int32 {
	if x != nil {
		return x.Ups
	}
	return 0
}

func (x *SubredditData) GetTotalAwardsReceived() int32 {
	if x != nil {
		return x.TotalAwardsReceived
	}
	return 0
}

func (x *SubredditData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubredditData) GetSubreddit() string {
	if x != nil {
		return x.Subreddit
	}
	return ""
}

func (x *SubredditData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubredditData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SubredditData) GetAuthorFullname() string {
	if x != nil {
		return x.AuthorFullname
	}
	return ""
}

type GetSubredditAuthorPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subreddit string `protobuf:"bytes,1,opt,name=subreddit,proto3" json:"subreddit,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetSubredditAuthorPostsRequest) Reset() {
	*x = GetSubredditAuthorPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_reddit_reddit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubredditAuthorPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubredditAuthorPostsRequest) ProtoMessage() {}

func (x *GetSubredditAuthorPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_reddit_reddit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubredditAuthorPostsRequest.ProtoReflect.Descriptor instead.
func (*GetSubredditAuthorPostsRequest) Descriptor() ([]byte, []int) {
	return file_protos_reddit_reddit_proto_rawDescGZIP(), []int{3}
}

func (x *GetSubredditAuthorPostsRequest) GetSubreddit() string {
	if x != nil {
		return x.Subreddit
	}
	return ""
}

func (x *GetSubredditAuthorPostsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSubredditAuthorPostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorPosts []*SubredditPost `protobuf:"bytes,1,rep,name=author_posts,json=authorPosts,proto3" json:"author_posts,omitempty"`
}

func (x *GetSubredditAuthorPostsResponse) Reset() {
	*x = GetSubredditAuthorPostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_reddit_reddit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubredditAuthorPostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubredditAuthorPostsResponse) ProtoMessage() {}

func (x *GetSubredditAuthorPostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_reddit_reddit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubredditAuthorPostsResponse.ProtoReflect.Descriptor instead.
func (*GetSubredditAuthorPostsResponse) Descriptor() ([]byte, []int) {
	return file_protos_reddit_reddit_proto_rawDescGZIP(), []int{4}
}

func (x *GetSubredditAuthorPostsResponse) GetAuthorPosts() []*SubredditPost {
	if x != nil {
		return x.AuthorPosts
	}
	return nil
}

type SubredditPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorFullname string `protobuf:"bytes,1,opt,name=author_fullname,json=authorFullname,proto3" json:"author_fullname,omitempty"`
	Author         string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Posts          int32  `protobuf:"varint,3,opt,name=posts,proto3" json:"posts,omitempty"`
}

func (x *SubredditPost) Reset() {
	*x = SubredditPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_reddit_reddit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubredditPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubredditPost) ProtoMessage() {}

func (x *SubredditPost) ProtoReflect() protoreflect.Message {
	mi := &file_protos_reddit_reddit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubredditPost.ProtoReflect.Descriptor instead.
func (*SubredditPost) Descriptor() ([]byte, []int) {
	return file_protos_reddit_reddit_proto_rawDescGZIP(), []int{5}
}

func (x *SubredditPost) GetAuthorFullname() string {
	if x != nil {
		return x.AuthorFullname
	}
	return ""
}

func (x *SubredditPost) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SubredditPost) GetPosts() int32 {
	if x != nil {
		return x.Posts
	}
	return 0
}

var File_protos_reddit_reddit_proto protoreflect.FileDescriptor

var file_protos_reddit_reddit_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2f,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x0d, 0x53, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x54, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73,
	0x32, 0xb3, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x55, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2f, 0x7b, 0x73,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x7d, 0x2f, 0x75, 0x70, 0x73, 0x12, 0x96, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x73, 0x75, 0x62, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x7d,
	0x2f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_reddit_reddit_proto_rawDescOnce sync.Once
	file_protos_reddit_reddit_proto_rawDescData = file_protos_reddit_reddit_proto_rawDesc
)

func file_protos_reddit_reddit_proto_rawDescGZIP() []byte {
	file_protos_reddit_reddit_proto_rawDescOnce.Do(func() {
		file_protos_reddit_reddit_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_reddit_reddit_proto_rawDescData)
	})
	return file_protos_reddit_reddit_proto_rawDescData
}

var file_protos_reddit_reddit_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protos_reddit_reddit_proto_goTypes = []interface{}{
	(*GetSubredditMostUpsRequest)(nil),      // 0: reddit.v1.GetSubredditMostUpsRequest
	(*GetSubredditMostUpsResponse)(nil),     // 1: reddit.v1.GetSubredditMostUpsResponse
	(*SubredditData)(nil),                   // 2: reddit.v1.SubredditData
	(*GetSubredditAuthorPostsRequest)(nil),  // 3: reddit.v1.GetSubredditAuthorPostsRequest
	(*GetSubredditAuthorPostsResponse)(nil), // 4: reddit.v1.GetSubredditAuthorPostsResponse
	(*SubredditPost)(nil),                   // 5: reddit.v1.SubredditPost
}
var file_protos_reddit_reddit_proto_depIdxs = []int32{
	2, // 0: reddit.v1.GetSubredditMostUpsResponse.subreddit_posts:type_name -> reddit.v1.SubredditData
	5, // 1: reddit.v1.GetSubredditAuthorPostsResponse.author_posts:type_name -> reddit.v1.SubredditPost
	0, // 2: reddit.v1.RedditService.GetSubredditMostUps:input_type -> reddit.v1.GetSubredditMostUpsRequest
	3, // 3: reddit.v1.RedditService.GetSubredditAuthorPosts:input_type -> reddit.v1.GetSubredditAuthorPostsRequest
	1, // 4: reddit.v1.RedditService.GetSubredditMostUps:output_type -> reddit.v1.GetSubredditMostUpsResponse
	4, // 5: reddit.v1.RedditService.GetSubredditAuthorPosts:output_type -> reddit.v1.GetSubredditAuthorPostsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_protos_reddit_reddit_proto_init() }
func file_protos_reddit_reddit_proto_init() {
	if File_protos_reddit_reddit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_reddit_reddit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubredditMostUpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_reddit_reddit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubredditMostUpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_reddit_reddit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubredditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_reddit_reddit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubredditAuthorPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_reddit_reddit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubredditAuthorPostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_reddit_reddit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubredditPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_reddit_reddit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_reddit_reddit_proto_goTypes,
		DependencyIndexes: file_protos_reddit_reddit_proto_depIdxs,
		MessageInfos:      file_protos_reddit_reddit_proto_msgTypes,
	}.Build()
	File_protos_reddit_reddit_proto = out.File
	file_protos_reddit_reddit_proto_rawDesc = nil
	file_protos_reddit_reddit_proto_goTypes = nil
	file_protos_reddit_reddit_proto_depIdxs = nil
}
